{"version":3,"sources":["UserEntry.js","Repositories.js","serviceWorker.js","index.js"],"names":["memo","props","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","react_default","a","createElement","className","type","value","onChange","e","target","onClick","preventDefault","history","push","GET_REPOS","gql","_templateObject","STAR_REPO","_templateObject2","UNSTAR_REPO","_templateObject3","RepositoryList","_ref3","repositories","refetch","nodes","map","_ref4","id","url","name","viewerHasStarred","key","href","react_apollo_esm","mutation","onCompleted","star","variables","repo","starrableId","Repositories","_ref","match","query","login","params","userName","_ref2","user","data","loading","Repositories_RepositoryList","Boolean","window","location","hostname","stored","localStorage","getItem","atob","GITHUB_TOKEN","prompt","setItem","link","HttpLink","uri","headers","authorization","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","react_router_dom","react_router","path","exact","component","UserEntry","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAsBeA,iBApBG,SAAAC,GAAS,IAAAC,EACOC,mBAAS,SADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACRI,EADQJ,EAAA,GAYzB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAOP,EAAUQ,SAXnB,SAAAC,GACnBR,EAAYQ,EAAEC,OAAOH,UAWnBL,EAAAC,EAAAC,cAAA,UAAQO,QARK,SAAAF,GACfA,EAAEG,iBACFlB,EAAMmB,QAAQC,KAAK,UAAYd,KAM7B,uqBCXN,IAAMe,EAAYC,IAAHC,KAeTC,EAAYF,IAAHG,KAQTC,EAAcJ,IAAHK,KAgCXC,EAAiB,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,aAAcC,EAAcF,EAAdE,QACtC,OACEvB,EAAAC,EAAAC,cAAA,UACGoB,EAAaE,MAAMC,IAAI,SAAAC,GAAyC,IAAtCC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,IAAKC,EAA6BH,EAA7BG,KAAMC,EAAuBJ,EAAvBI,iBACxC,OACE9B,EAAAC,EAAAC,cAAA,MAAI6B,IAAKJ,GACP3B,EAAAC,EAAAC,cAAA,KAAG8B,KAAMJ,GAAMC,GACf7B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEC,SAAUJ,EAAmBZ,EAAcF,EAC3CmB,YAAaZ,GACZ,SAAAa,GAAI,OACHpC,EAAAC,EAAAC,cAAA,UAAQO,SArBLyB,EAqByBE,EArBb,SAAAT,GAAE,OAAI,SAAApB,GACnC2B,EAAS,CACPG,UAAW,CACTC,KAAM,CACJC,YAAaZ,SAiB6BA,IAC/BG,EAAmB,SAAW,QAtB9B,IAAAI,SAiCJM,EA/CM,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACnB1C,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOU,MAAO9B,EAAWwB,UAAW,CAAEO,MAAOF,EAAMG,OAAOC,WACvD,SAAAC,GAA0C,IAA/BC,EAA+BD,EAAvCE,KAAQD,KAAQE,EAAuBH,EAAvBG,QAAS3B,EAAcwB,EAAdxB,QAC3B,OAAI2B,IAAYF,EACPhD,EAAAC,EAAAC,cAAA,0BAIPF,EAAAC,EAAAC,cAACiD,EAAD,CAAgB7B,aAAc0B,EAAK1B,aAAcC,QAASA,aCjC9C6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCFN,IAAIc,EAASC,aAAaC,QAAQ,gBACZ,kBAAXF,IACTA,EAASG,KAAK,6DAGhB,IAAMC,EAAeP,OAAOQ,OAAO,0BAA2BL,GAC9DC,aAAaK,QAAQ,eAAgBF,GAErC,IAAMG,EAAO,IAAIC,IAAS,CACxBC,IAAK,iCACLC,QAAS,CACPC,cAAa,UAAAC,OAAYR,MAIvBS,EAAS,IAAIC,IAAa,CAAEP,OAAMQ,MAAO,IAAIC,MAanDC,IAASC,OAAO1E,EAAAC,EAAAC,cAXJ,SAAAV,GACV,OACEQ,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAgBoC,OAAQA,GACtBrE,EAAAC,EAAAC,cAACyE,EAAA,EAAD,KACE3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjChF,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOC,KAAK,mBAAmBE,UAAWvC,OAMlC,MAASyC,SAASC,eAAe,SDqF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f42976ad.chunk.js","sourcesContent":["import React, { useState, memo } from 'react';\n\nconst UserEntry = props => {\n  const [username, setUsername] = useState('fa7ad');\n\n  const handleChange = e => {\n    setUsername(e.target.value);\n  };\n\n  const handleGo = e => {\n    e.preventDefault();\n    props.history.push('/repos/' + username);\n  };\n\n  return (\n    <div className='card'>\n      <input type='text' value={username} onChange={handleChange} />\n      <button onClick={handleGo}>Let's go!</button>\n    </div>\n  );\n};\n\nexport default memo(UserEntry);\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\n\nimport './App.css';\n\nconst GET_REPOS = gql`\n  query($login: String!) {\n    user(login: $login) {\n      repositories(first: 100) {\n        nodes {\n          id\n          name\n          url\n          viewerHasStarred\n        }\n      }\n    }\n  }\n`;\n\nconst STAR_REPO = gql`\n  mutation($repo: AddStarInput!) {\n    addStar(input: $repo) {\n      clientMutationId\n    }\n  }\n`;\n\nconst UNSTAR_REPO = gql`\n  mutation($repo: RemoveStarInput!) {\n    removeStar(input: $repo) {\n      clientMutationId\n    }\n  }\n`;\n\nconst Repositories = ({ match }) => (\n  <Query query={GET_REPOS} variables={{ login: match.params.userName }}>\n    {({ data: { user }, loading, refetch }) => {\n      if (loading || !user) {\n        return <div>Loading ...</div>;\n      }\n\n      return (\n        <RepositoryList repositories={user.repositories} refetch={refetch} />\n      );\n    }}\n  </Query>\n);\n\nconst toggleStar = mutation => id => e => {\n  mutation({\n    variables: {\n      repo: {\n        starrableId: id\n      }\n    }\n  });\n};\n\nconst RepositoryList = ({ repositories, refetch }) => {\n  return (\n    <ul>\n      {repositories.nodes.map(({ id, url, name, viewerHasStarred }) => {\n        return (\n          <li key={id}>\n            <a href={url}>{name}</a>\n            <Mutation\n              mutation={viewerHasStarred ? UNSTAR_REPO : STAR_REPO}\n              onCompleted={refetch}>\n              {star => (\n                <button onClick={toggleStar(star)(id)}>\n                  {viewerHasStarred ? 'Unstar' : 'Star'}\n                </button>\n              )}\n            </Mutation>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Repositories;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ApolloProvider } from 'react-apollo';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport UserEntry from './UserEntry';\nimport Repositories from './Repositories';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nlet stored = localStorage.getItem('github_token');\nif (typeof stored === 'object') {\n  stored = atob('NGY2ZTUwNThiZjMzZWQ0NTQ5MTU5ZTYwNmY4ZjE1NzNhYTkwYmUxZg==');\n}\n\nconst GITHUB_TOKEN = window.prompt('Enter your github token', stored);\nlocalStorage.setItem('github_token', GITHUB_TOKEN);\n\nconst link = new HttpLink({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${GITHUB_TOKEN}`\n  }\n});\n\nconst client = new ApolloClient({ link, cache: new InMemoryCache() });\n\nconst App = props => {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Route path='/' exact component={UserEntry} />\n        <Route path='/repos/:userName' component={Repositories} />\n      </Router>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}